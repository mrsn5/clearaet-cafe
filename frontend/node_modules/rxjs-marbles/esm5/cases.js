var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var getPrototypeOf = Object.getPrototypeOf || function (obj) {
    return obj.__proto__;
};
export function _cases(adapter, cases) {
    if (getPrototypeOf(cases) !== Array.prototype) {
        cases = Object.keys(cases).map(function (key) { return (__assign({}, cases[key], { name: key })); });
    }
    cases.forEach(adapter);
}
