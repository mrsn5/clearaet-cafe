var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { deepEqual } from "fast-equals";
var defaultConfiguration = {
    assert: defaultAssert,
    assertDeepEqual: defaultAssertDeepEqual,
    frameworkMatcher: false,
    run: true
};
export function defaults() {
    return __assign({}, defaultConfiguration);
}
function defaultAssert(value, message) {
    if (value) {
        return;
    }
    throw new Error(message);
}
function defaultAssertDeepEqual(a, b) {
    if (deepEqual(a, b)) {
        return;
    }
    throw new Error("Expected " + toString(a) + " to equal " + toString(b) + ".");
}
function toString(value) {
    if (value === null) {
        return "null";
    }
    else if (value === undefined) {
        return "undefined";
    }
    return value.toString();
}
